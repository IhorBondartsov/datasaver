// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protofile/personData.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	protofile/personData.proto

It has these top-level messages:
	PersonData
	Nothing
	PingMessage
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PersonData struct {
	ID           int32  `protobuf:"varint,1,opt,name=ID,json=iD" json:"ID,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=Name,json=name" json:"Name,omitempty"`
	Email        string `protobuf:"bytes,3,opt,name=Email,json=email" json:"Email,omitempty"`
	MobileNumber string `protobuf:"bytes,4,opt,name=MobileNumber,json=mobileNumber" json:"MobileNumber,omitempty"`
}

func (m *PersonData) Reset()                    { *m = PersonData{} }
func (m *PersonData) String() string            { return proto.CompactTextString(m) }
func (*PersonData) ProtoMessage()               {}
func (*PersonData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PersonData) GetID() int32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *PersonData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PersonData) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *PersonData) GetMobileNumber() string {
	if m != nil {
		return m.MobileNumber
	}
	return ""
}

type Nothing struct {
	Dummy bool `protobuf:"varint,1,opt,name=dummy" json:"dummy,omitempty"`
}

func (m *Nothing) Reset()                    { *m = Nothing{} }
func (m *Nothing) String() string            { return proto.CompactTextString(m) }
func (*Nothing) ProtoMessage()               {}
func (*Nothing) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Nothing) GetDummy() bool {
	if m != nil {
		return m.Dummy
	}
	return false
}

type PingMessage struct {
	Greeting string `protobuf:"bytes,1,opt,name=greeting" json:"greeting,omitempty"`
}

func (m *PingMessage) Reset()                    { *m = PingMessage{} }
func (m *PingMessage) String() string            { return proto.CompactTextString(m) }
func (*PingMessage) ProtoMessage()               {}
func (*PingMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PingMessage) GetGreeting() string {
	if m != nil {
		return m.Greeting
	}
	return ""
}

func init() {
	proto.RegisterType((*PersonData)(nil), "pb.PersonData")
	proto.RegisterType((*Nothing)(nil), "pb.Nothing")
	proto.RegisterType((*PingMessage)(nil), "pb.PingMessage")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CSVSender service

type CSVSenderClient interface {
	Save(ctx context.Context, in *PersonData, opts ...grpc.CallOption) (*Nothing, error)
	Print(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (*Nothing, error)
	SayHello(ctx context.Context, in *PingMessage, opts ...grpc.CallOption) (*PingMessage, error)
}

type cSVSenderClient struct {
	cc *grpc.ClientConn
}

func NewCSVSenderClient(cc *grpc.ClientConn) CSVSenderClient {
	return &cSVSenderClient{cc}
}

func (c *cSVSenderClient) Save(ctx context.Context, in *PersonData, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := grpc.Invoke(ctx, "/pb.CSVSender/Save", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSVSenderClient) Print(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := grpc.Invoke(ctx, "/pb.CSVSender/Print", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSVSenderClient) SayHello(ctx context.Context, in *PingMessage, opts ...grpc.CallOption) (*PingMessage, error) {
	out := new(PingMessage)
	err := grpc.Invoke(ctx, "/pb.CSVSender/SayHello", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CSVSender service

type CSVSenderServer interface {
	Save(context.Context, *PersonData) (*Nothing, error)
	Print(context.Context, *Nothing) (*Nothing, error)
	SayHello(context.Context, *PingMessage) (*PingMessage, error)
}

func RegisterCSVSenderServer(s *grpc.Server, srv CSVSenderServer) {
	s.RegisterService(&_CSVSender_serviceDesc, srv)
}

func _CSVSender_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersonData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSVSenderServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CSVSender/Save",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSVSenderServer).Save(ctx, req.(*PersonData))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSVSender_Print_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nothing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSVSenderServer).Print(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CSVSender/Print",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSVSenderServer).Print(ctx, req.(*Nothing))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSVSender_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSVSenderServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CSVSender/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSVSenderServer).SayHello(ctx, req.(*PingMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _CSVSender_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.CSVSender",
	HandlerType: (*CSVSenderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Save",
			Handler:    _CSVSender_Save_Handler,
		},
		{
			MethodName: "Print",
			Handler:    _CSVSender_Print_Handler,
		},
		{
			MethodName: "SayHello",
			Handler:    _CSVSender_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protofile/personData.proto",
}

func init() { proto.RegisterFile("protofile/personData.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 260 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0xcf, 0x4a, 0xf3, 0x40,
	0x14, 0xc5, 0x9b, 0x7c, 0xc9, 0x67, 0x72, 0x5b, 0x2a, 0x5c, 0x5c, 0x84, 0x6c, 0x2c, 0x23, 0x42,
	0xdd, 0x44, 0xd0, 0x47, 0x30, 0x82, 0x2e, 0x1a, 0x42, 0x02, 0xee, 0x27, 0xf4, 0x1a, 0x47, 0xe6,
	0x4f, 0x98, 0x4c, 0x85, 0x3e, 0x81, 0xaf, 0x2d, 0x19, 0xa5, 0x2d, 0x5d, 0xfe, 0x7e, 0x73, 0x38,
	0x67, 0x66, 0x20, 0x1f, 0xac, 0x71, 0xe6, 0x5d, 0x48, 0xba, 0x1f, 0xc8, 0x8e, 0x46, 0x97, 0xdc,
	0xf1, 0xc2, 0x4b, 0x0c, 0x87, 0x8e, 0x7d, 0x02, 0xd4, 0x07, 0x8f, 0x4b, 0x08, 0x5f, 0xcb, 0x2c,
	0x58, 0x05, 0xeb, 0xb8, 0x09, 0x45, 0x89, 0x08, 0x51, 0xc5, 0x15, 0x65, 0xe1, 0x2a, 0x58, 0xa7,
	0x4d, 0xa4, 0xb9, 0x22, 0xbc, 0x82, 0xf8, 0x59, 0x71, 0x21, 0xb3, 0x7f, 0x5e, 0xc6, 0x34, 0x01,
	0x32, 0x58, 0x6c, 0x4c, 0x27, 0x24, 0x55, 0x3b, 0xd5, 0x91, 0xcd, 0x22, 0x7f, 0xb8, 0x50, 0x27,
	0x8e, 0x5d, 0xc3, 0x45, 0x65, 0xdc, 0x87, 0xd0, 0xfd, 0x54, 0xb2, 0xdd, 0x29, 0xb5, 0xf7, 0x5b,
	0x49, 0xf3, 0x0b, 0xec, 0x0e, 0xe6, 0xb5, 0xd0, 0xfd, 0x86, 0xc6, 0x91, 0xf7, 0x84, 0x39, 0x24,
	0xbd, 0x25, 0x72, 0x42, 0xf7, 0x3e, 0x97, 0x36, 0x07, 0x7e, 0xf8, 0x0e, 0x20, 0x7d, 0x6a, 0xdf,
	0x5a, 0xd2, 0x5b, 0xb2, 0x78, 0x0b, 0x51, 0xcb, 0xbf, 0x08, 0x97, 0xc5, 0xd0, 0x15, 0xc7, 0xf7,
	0xe4, 0xf3, 0x89, 0xff, 0x36, 0xd9, 0x0c, 0x6f, 0x20, 0xae, 0xad, 0xd0, 0x0e, 0x4f, 0xfd, 0x79,
	0xa8, 0x80, 0xa4, 0xe5, 0xfb, 0x17, 0x92, 0xd2, 0xe0, 0xa5, 0xef, 0x3b, 0x5e, 0x29, 0x3f, 0x17,
	0x6c, 0xd6, 0xfd, 0xf7, 0x9f, 0xf9, 0xf8, 0x13, 0x00, 0x00, 0xff, 0xff, 0x89, 0x16, 0x56, 0x00,
	0x6a, 0x01, 0x00, 0x00,
}
